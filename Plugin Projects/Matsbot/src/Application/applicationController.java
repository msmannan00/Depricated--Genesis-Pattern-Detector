package Application;import org.apache.commons.io.FileUtils;import java.awt.*;import java.io.File;import java.io.IOException;import java.util.ArrayList;public class applicationController{  private static void appInitialization() throws IOException  {  }  public static void triggerCommand(String user_command) throws IOException, InterruptedException  {    if (user_command.equals(constants.empty_string))    {      return;    }    else if (commands.uml_generator.toString().equals(user_command))    {      File file = new File("C:\\Users\\Dell\\modelio\\Modelio Open Source 3.8\\modelio.exe");      Desktop.getDesktop().open(file);      logManager.loge("Modelio opened");    }    else if (commands.open_classifier.toString().equals(user_command))    {      File f = new File("C:\\xampp\\htdocs\\desim\\Extracted_Source\\Datasets");      if(!f.exists() || !f.isDirectory())      {          logManager.loge("Datasets not found please upload it along with source code");      }      else      {          helperMethod.openPythonProject();          logManager.loge("Classifier opened");      }    }    else if (commands.clear_all.toString().equals(user_command))    {        FileUtils.deleteDirectory(new File("C:\\xampp\\htdocs\\desim\\Extracted_Source"));        FileUtils.deleteDirectory(new File("C:\\xampp\\htdocs\\desim\\Source"));        FileUtils.forceMkdir(new File("C:\\xampp\\htdocs\\desim\\Extracted_Source"));        FileUtils.forceMkdir(new File("C:\\xampp\\htdocs\\desim\\Source"));        logManager.loge("Files Cleared");    }    else if (commands.extract_code.toString().equals(user_command))    {      UnRar.unzip(constants.extracted_source, constants.extracted_source_dest);      logManager.loge("Rar file Extracted");    }    else if (user_command.contains(commands.file_support.toString()))    {      String command = user_command.split("\\|")[1];      if (command.length() > 2)      {        status.file_support = command;      }      System.out.println(command);      logManager.loge("File Support Updated");    }    else if (user_command.contains(commands.regex.toString()))    {      String command = user_command.split("\\|",2)[1];      if (command.length() > 2)      {        status.file_support = command;      }      fileManager.matchRegexFromFiles(command);      System.out.println(command);      logManager.loge("Regex Executed");    }    else if (user_command.equals(commands.compile.toString()))    {      String command = user_command;      String maindirpath = constants.extracted_source_dest;      File maindir = new File(maindirpath);      System.out.println(command);      fileManager.indexFiles(maindir.listFiles(), "",0, 0, status.file_support);      dataset.getInstance().fmodel.filteredPercentage = (dataset.getInstance().fmodel.filteredFiles * 100) / dataset.getInstance().fmodel.totalFiles;      dataset.getInstance().fmodel.averageLinesPerfile = dataset.getInstance().fmodel.totalLines / dataset.getInstance().fmodel.totalFiles;      fileManager.writeFileModel(dataset.getInstance().fmodel);      System.out.println(command);      logManager.loge("Compilation Successfull");    }    else if (user_command.contains(commands.init_parse.toString()))    {      String command = user_command.split("\\|")[1];      status.parseType = command;      logManager.loge("Parser Initialized");    }    else if (user_command.contains(commands.parse.toString()))    {      String command = user_command.split("\\|")[1];      fileManager.matchParserFromFiles(command);      logManager.loge("Parse Request Executed");    }  }  /*TRIGGER CRAWLER*/  public static void main(String[] args) throws Exception  {    new Thread()    {      public void run()      {        while (true)        {          try          {            sleep(1000);            triggerCommand(fileManager.readFromFile(constants.command_file));            fileManager.removeFirstLine(constants.command_file);          }          catch (Exception e)          {            e.printStackTrace();          }        }      }    }.start();  }  /*HELPER FRONTEND LOG UI*/  private static void logInitialization() throws Exception  {  }}